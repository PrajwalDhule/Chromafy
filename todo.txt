
FEATURES

- randomly generate palette of 5 colors (text and bg very subtle) possibly based on a selected color scheme
- apply color to appropriate ui elements
- generate palettes using prompts
- can lock color(s)
- provide and apply shades (opacity based) of the colors as well
- export the palettes in various formats


TASKS

x 2024-02-27 - generate palette of 5 colors (text and bg very subtle) 
x 2024-02-29 - generate based on color scheme if one is selected
x 2024-02-29 - handle light and dark mode (just 100 - lightness)
x 2024-03-09 - limit to how many palettes to store in localStorage
x 2024-03-09 - first apply the colors in terms of variables to all the required elements, and then for every palette generation, keep changing the variable values
x 2024-03-11 - generate shades (opacity based) of the colors with maybe a naming convention like tailwind (red-300, blue-700)
x 2024-03-11 - give naming conventions for both foreground and background for each color (fg-chroma-text-200, bg-chroma-bg)
x 2024-03-11 - rest of the colors, optionally text as well, should be applied to their corresponding classes (original primary color should be applied as a background-color to .bg-chroma-primary)
x 2024-03-12 - fine tune the colors to not go too light on light mode & too dark on dark mode, have a range of lightness for each color (different for both themes, and not just a range like 100 - l)
x 2024-03-12 - inject a css file with !important
x 2024-03-12 - hover animations to reveal title (text, primary, etc)
x 2024-03-21 - undo redo pallette generation (store a colorState (useState), also be careful that changing palette variable after redo or undoing can push those colors into the colorState acc to the current logic which we don't want)
x 2024-03-23 - convert the colors to various formats (rgb, hsl, etc) and export

- all property css - don't let background css affect chromafy ui
- dark mode ui logic to all remaining buttons
- complete color picker ui
- bug while clicking extension button
- change all classes to less generic names, preferably chromafy related (eg: change "container" to something else)
- round values in hsl especially while exporting
- change the linear gradient on the range slider for color picker since it is the exact copy of realtimecolors
- seperate functions into event handlers and helper funcs and abstract them into seperate files
- apply proper names to functions ("handle" as prefix)
- add error handling (refer chatgpt chats)

- PROMPT BASED GENERATION
- refer to realtimecolors "how does it work" section for a guide on which classes to give to which components (helpful for documentation)
- documentation 
- website (have a section showcasing multiple components)


FUTURE/OPTIONAL:
- convert the colors to various variables (css, tailwind, etc) for exporting
- handle locking of colors and how it will affect palette generation
- relation between primary secondary and accent colors and how generation of one is based on the other
- apply text color globally (html, input, a) with an option to turn off global application
- CONTRAST


EXTRA FEATURES/IDEAS
- maybe don't keep adding color palettes in localStorage if the theme of the same palette has been change several times in a row (eg: for a palette "a" you could end up storing [light(a), dark(a), light(a), dark(a), light(a)])